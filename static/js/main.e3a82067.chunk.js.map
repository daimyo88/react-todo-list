{"version":3,"sources":["wrappers/AuxWrapper.js","ui/buttons/ButtonContainer/ButtonContainer.js","ui/buttons/Button/Button.js","ui/modals/Modal/Modal.js","ui/Backdrop/Backdrop.js","components/userControls/UserLogout/UserLogout.js","layout/Header/Header.js","layout/Footer/Footer.js","components/Todolist/Task/TaskControls/TaskControls.js","components/Todolist/Task/Task.js","components/Todolist/TaskForm/TaskForm.js","components/Todolist/Todolist.js","components/userControls/UserLogin/UserLogin.js","App.js","serviceWorker.js","index.js"],"names":["AuxWrapper","props","children","ButtonContainer","buttonContainerClass","push","type","className","join","Button","cssClass","onClick","clickHandler","title","Modal","Backdrop","UserLogout","toggleModal","bool","setState","modal","state","userMessage","this","user","icon","logout","Component","Header","Footer","TaskControls","task","description","toggleDescription","id","status","setAction","Task","priority","descriptionOpen","mainBar","setCurrentTask","TaskForm","formChangeHandler","event","target","value","name","submitHandler","data","cancelHandler","validationError","defaultSubmit","preventDefault","onSubmit","onChange","checked","htmlFor","Todolist","currentAction","resetAction","currentTask","tasks","i","findIndex","el","setTasksToStorage","deleteTask","splice","changeStatusTask","editTask","addNewTask","Date","now","unshift","tasksString","JSON","stringify","localStorage","setItem","parse","getItem","incompleteTasks","filter","modalContent","header","length","sort","a","b","map","key","confirmHandler","modals","handler","UserLogin","changeHandler","username","App","setUser","checkUser","clear","userLogin","library","add","faSignOutAlt","faTrash","faPen","faCheck","faArrowUp","faChevronDown","mainContent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e3a82067.chunk.js","sourcesContent":["const AuxWrapper = (props) => props.children;\r\n\r\nexport default AuxWrapper;\r\n","import React from 'react';\r\n\r\nimport './ButtonContainer.scss';\r\n\r\nconst ButtonContainer = (props) => {\r\n  const buttonContainerClass = ['ButtonContainer'];\r\n  buttonContainerClass.push(props.type);\r\n  return (\r\n    <div className={buttonContainerClass.join(' ')}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ButtonContainer;\r\n","import React from 'react';\r\n\r\nimport './Button.scss';\r\n\r\nconst Button = (props) => {\r\n  const cssClass = ['Button'];\r\n  cssClass.push(props.type);\r\n  return (\r\n    <button className={cssClass.join(' ')} onClick={props.clickHandler}>{props.title}</button>\r\n  )\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\n\r\nimport './Modal.scss';\r\n\r\nconst Modal = (props) => {\r\n\r\n  return (\r\n    <div className=\"Modal\">\r\n        { props.children }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\n\r\nimport './Backdrop.scss';\r\n\r\nconst Backdrop = (props) => {\r\n  return (\r\n    <div className=\"Backdrop\" onClick={props.clickHandler}>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Backdrop;\r\n","import React , { Component } from 'react';\r\n\r\nimport AuxWrapper from '../../../wrappers/AuxWrapper';\r\nimport ButtonContainer from '../../../ui/buttons/ButtonContainer/ButtonContainer';\r\nimport Button from '../../../ui/buttons/Button/Button';\r\nimport Modal from '../../../ui/modals/Modal/Modal';\r\nimport Backdrop from '../../../ui/Backdrop/Backdrop';\r\n\r\nimport './UserLogout.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nclass UserLogout extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      modal : false\r\n    }\r\n  }\r\n\r\n  toggleModal = (bool) => {\r\n    this.setState({\r\n      modal : bool\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const userMessage = (\r\n      <div className=\"UserLogout\">\r\n        <div className=\"user\">Hello, {this.props.user}</div>\r\n        <FontAwesomeIcon\r\n          icon=\"sign-out-alt\"\r\n          onClick={() => this.toggleModal(true)}\r\n          />\r\n      </div>\r\n    )\r\n\r\n    const modal = this.state.modal === true ? (\r\n      <AuxWrapper>\r\n        <Backdrop clickHandler = {() => this.toggleModal(false)} />\r\n        <Modal>\r\n          <p>Do you want to logout? <br /> All tasks will be deleted</p>\r\n          <ButtonContainer type=\"center\">\r\n            <Button type=\"confirm\" title=\"ok\" clickHandler={this.props.logout}/>\r\n            <Button type=\"decline\" title=\"cancel\" clickHandler={() => this.toggleModal(false)}  />\r\n          </ButtonContainer>\r\n        </Modal>\r\n      </AuxWrapper>\r\n    ) : null;\r\n\r\n    return (\r\n      <AuxWrapper>\r\n        { userMessage }\r\n        { modal }\r\n      </AuxWrapper>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default UserLogout;\r\n","import React from 'react';\r\n\r\nimport './Header.scss';\r\n\r\nimport UserLogout from '../../components/userControls/UserLogout/UserLogout';\r\n\r\nconst Header = (props) => {\r\n\r\n    return (\r\n      <div className=\"Header\">\r\n        <div className=\"logo\">YTDL</div>\r\n        {\r\n          props.user !== null ? (\r\n            <UserLogout\r\n              user = {props.user}\r\n              logout = {props.logout}\r\n            />\r\n          ) : null\r\n        }\r\n\r\n      </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport './Footer.scss';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"Footer\">\r\n      © 2020 DDNF dev.\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './TaskControls.scss';\r\n\r\nconst TaskControls = (props) => {\r\n\r\n  return (\r\n    <div className=\"TaskControls\">\r\n      {\r\n        props.task.description !== '' ? (\r\n          <div className=\"item description-toggler\" onClick={() => props.toggleDescription(props.task.id)}>\r\n            <FontAwesomeIcon icon=\"chevron-down\" />\r\n          </div>\r\n        ) : null\r\n      }\r\n      {\r\n        props.task.status === false ? (\r\n          <div className=\"item\"\r\n            onClick={\r\n              () => {\r\n                props.setAction('complete');\r\n              }\r\n          }>\r\n            <FontAwesomeIcon icon=\"check\" />\r\n          </div>\r\n        ) : (\r\n          <div className=\"item\"\r\n              onClick={\r\n                () => {\r\n                  props.setAction('incomplete');\r\n                }\r\n            }>\r\n            <FontAwesomeIcon icon=\"arrow-up\" />\r\n          </div>\r\n        )\r\n      }\r\n\r\n      <div className=\"item\"\r\n        onClick={\r\n          () => {\r\n            props.setAction('editTask');\r\n          }\r\n        }>\r\n        <FontAwesomeIcon icon=\"pen\" />\r\n      </div>\r\n      <div className=\"item\"\r\n        onClick={\r\n          () => {\r\n            props.setAction('delete');\r\n          }\r\n        }>\r\n        <FontAwesomeIcon icon=\"trash\" />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TaskControls;\r\n","import React from 'react';\r\n\r\nimport './Task.scss';\r\n\r\nimport TaskControls from './TaskControls/TaskControls';\r\n\r\nconst Task = (props) => {\r\n\r\n  const cssClass = ['Task'];\r\n  cssClass.push('Task priority-' + props.task.priority);\r\n  if(props.task.status === true) {\r\n    cssClass.push('complete');\r\n  }\r\n  if(props.task.descriptionOpen === true) {\r\n    cssClass.push('description-open');\r\n  }\r\n\r\n  const mainBar = (\r\n    <div className=\"main-bar\" onClick={(task) => props.setCurrentTask(props.task)}>\r\n      <h3>\r\n        {props.task.title}\r\n      </h3>\r\n      <TaskControls\r\n        task={props.task}\r\n        toggleDescription = {props.toggleDescription}\r\n        setAction = {props.setAction}\r\n      />\r\n    </div>\r\n  )\r\n\r\n  const description = (props.task.description !== '' && props.task.descriptionOpen === true) ? (\r\n    <div className=\"description\">\r\n      { props.task.description }\r\n    </div>\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={cssClass.join(' ')}>\r\n      { mainBar }\r\n      { description }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Task;\r\n","import React, {Component} from 'react';\r\n\r\nimport './TaskForm.scss';\r\n\r\nimport AuxWrapper from '../../../wrappers/AuxWrapper';\r\nimport ButtonContainer from '../../../ui/buttons/ButtonContainer/ButtonContainer';\r\nimport Button from '../../../ui/buttons/Button/Button';\r\n\r\nclass TaskForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title : '',\r\n      description : '',\r\n      priority : \"0\",\r\n      validationError : false,\r\n      id : '',\r\n      status : false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    if (this.props.task !== '') {\r\n      const { title, description, priority, id, status } = this.props.task;\r\n      this.setState(\r\n         { title, description, priority, id, status }\r\n      )\r\n    }\r\n  }\r\n\r\n  formChangeHandler = (event) => {\r\n      const target = event.target;\r\n      const value = target.value;\r\n      const name = target.name;\r\n\r\n      this.setState({\r\n          [name]: value\r\n      });\r\n  }\r\n\r\n  submitHandler = () => {\r\n    const data = {\r\n      title : this.state.title,\r\n      description : this.state.description,\r\n      priority : this.state.priority,\r\n      id : this.state.id,\r\n      status : this.state.status\r\n    }\r\n\r\n    if (data.title !== '') {\r\n\r\n      this.props.submitHandler(data);\r\n      this.props.cancelHandler();\r\n    } else {\r\n      this.setState({\r\n        validationError : true\r\n      })\r\n    }\r\n  }\r\n\r\n  cancelHandler = () => {\r\n    this.props.cancelHandler();\r\n  }\r\n\r\n  defaultSubmit = (event) => {\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <AuxWrapper>\r\n        <form onSubmit={this.defaultSubmit} className=\"TaskForm\">\r\n          <div className=\"input-block\">\r\n            <div className=\"input-label\">Title</div>\r\n            { this.state.validationError === true ? (\r\n              <div className=\"validation-message\">This field should not be empty</div>\r\n            ) : null }\r\n            <input onChange={this.formChangeHandler} type=\"text\" name=\"title\" value={this.state.title}/>\r\n          </div>\r\n\r\n          <div className=\"input-block\">\r\n            <div className=\"input-label\">Description</div>\r\n            <textarea onChange={this.formChangeHandler} name=\"description\" value={this.state.description} />\r\n          </div>\r\n\r\n          <div className=\"input-block\">\r\n            <div className=\"input-label additional-margin\">Priority</div>\r\n            <div className=\"checkbox-item priority-high\">\r\n              <input\r\n                  onChange={this.formChangeHandler}\r\n                  name=\"priority\"\r\n                  type=\"radio\"\r\n                  value=\"0\"\r\n                  id=\"priority-0\"\r\n                  checked={this.state.priority === '0' ? true : false} />\r\n              <label htmlFor=\"priority-0\">High</label>\r\n            </div>\r\n            <div className=\"checkbox-item priority-medium\">\r\n              <input\r\n                  onChange={this.formChangeHandler}\r\n                  name=\"priority\"\r\n                  type=\"radio\"\r\n                  value=\"1\"\r\n                  id=\"priority-1\"\r\n                  checked={this.state.priority === '1' ? true : false} />\r\n              <label htmlFor=\"priority-1\">Medium</label>\r\n            </div>\r\n            <div className=\"checkbox-item priority-low\">\r\n              <input\r\n                  onChange={this.formChangeHandler}\r\n                  name=\"priority\"\r\n                  type=\"radio\"\r\n                  value=\"2\"\r\n                  id=\"priority-2\"\r\n                  checked={this.state.priority === '2' ? true : false} />\r\n              <label htmlFor=\"priority-2\">Low</label>\r\n            </div>\r\n          </div>\r\n        </form>\r\n\r\n        <ButtonContainer type=\"center\">\r\n          <Button type=\"confirm\" title=\"Ok\" clickHandler={this.submitHandler}/>\r\n          <Button type=\"decline\" title=\"Cancel\" clickHandler={this.cancelHandler}/>\r\n        </ButtonContainer>\r\n\r\n      </AuxWrapper>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default TaskForm;\r\n","import React, { Component } from 'react';\r\n\r\nimport AuxWrapper from '../../wrappers/AuxWrapper';\r\nimport Task from './Task/Task';\r\nimport TaskForm from './TaskForm/TaskForm';\r\nimport ButtonContainer from '../../ui/buttons/ButtonContainer/ButtonContainer';\r\nimport Button from '../../ui/buttons/Button/Button';\r\nimport Modal from '../../ui/modals/Modal/Modal';\r\nimport Backdrop from '../../ui/Backdrop/Backdrop';\r\n\r\nimport './Todolist.scss';\r\n\r\nclass Todolist extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      currentTask : '',\r\n      currentAction : '',\r\n      tasks : []\r\n    }\r\n  }\r\n\r\n  setAction = (type) => {\r\n    this.setState((state) => {\r\n      return {\r\n        currentAction : type\r\n      }\r\n    })\r\n  }\r\n\r\n  resetAction = (type) => {\r\n    this.setState((state) => {\r\n      return {\r\n        currentAction : '',\r\n        currentTask : ''\r\n      }\r\n    })\r\n  }\r\n\r\n  setCurrentTask = (task) => {\r\n    this.setState((state) => {\r\n      return {\r\n        currentTask : task\r\n      }\r\n    });\r\n  }\r\n\r\n  toggleDescription = (id) => {\r\n    const tasks = [...this.state.tasks];\r\n    const i = tasks.findIndex(el => el.id === id);\r\n    tasks[i].descriptionOpen = !tasks[i].descriptionOpen;\r\n    this.setState((state) => {\r\n      this.setTasksToStorage(tasks);\r\n      return {\r\n        tasks\r\n      }\r\n    })\r\n  }\r\n\r\n  deleteTask = (id) => {\r\n    let tasks = [...this.state.tasks];\r\n    const i = tasks.findIndex(el => el.id === id);\r\n    tasks.splice(i, 1);\r\n    this.setState((state) => {\r\n      this.setTasksToStorage(tasks);\r\n      return {\r\n        tasks : tasks,\r\n        currentAction : '',\r\n        currentTask : ''\r\n      }\r\n    })\r\n  }\r\n\r\n  changeStatusTask = (id, status) => {\r\n    let tasks = [...this.state.tasks];\r\n    const i = tasks.findIndex(el => el.id === id);\r\n    tasks[i].status = status;\r\n    this.setState((state) => {\r\n      this.setTasksToStorage(tasks);\r\n      return {\r\n        tasks : tasks,\r\n        currentAction : '',\r\n        currentTask : ''\r\n      }\r\n    })\r\n  }\r\n\r\n  editTask = (task) => {\r\n\r\n    this.setState((state) => {\r\n      let tasks = [...state.tasks];\r\n      const i = tasks.findIndex(el => el.id === task.id);\r\n      tasks[i]  = task;\r\n      this.setTasksToStorage(tasks);\r\n      return {\r\n        tasks\r\n      }\r\n    })\r\n  }\r\n\r\n  addNewTask = (task) => {\r\n    task.id = Date.now();\r\n    task.status = false;\r\n\r\n    this.setState((state) => {\r\n      let tasks = [...state.tasks];\r\n      tasks.unshift(task);\r\n      this.setTasksToStorage(tasks);\r\n      return {\r\n        tasks\r\n      }\r\n    });\r\n  }\r\n\r\n  setTasksToStorage = (tasks) => {\r\n    const tasksString = JSON.stringify(tasks);\r\n    localStorage.setItem('tasks', tasksString);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const tasks = JSON.parse(localStorage.getItem('tasks')) || [];\r\n    this.setState((state) => {\r\n      return {\r\n        tasks\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    const incompleteTasks = this.state.tasks.filter(el => {\r\n      if (el.status === false) {\r\n        return el;\r\n      }\r\n      return null;\r\n    });\r\n\r\n    let modalContent = '';\r\n\r\n    switch(this.state.currentAction) {\r\n      case 'delete':\r\n      modalContent = (\r\n        <AuxWrapper>\r\n          <p>Do you realy want to delete task <b>{this.state.currentTask.title}</b> ?</p>\r\n          <ButtonContainer type=\"center\">\r\n            <Button type=\"confirm\" title=\"ok\" clickHandler={() => this.deleteTask(this.state.currentTask.id)}/>\r\n            <Button type=\"decline\" title=\"cancel\" clickHandler={this.resetAction} />\r\n          </ButtonContainer>\r\n        </AuxWrapper>\r\n      );\r\n      break;\r\n\r\n      case 'complete':\r\n      modalContent = (\r\n        <AuxWrapper>\r\n          <p>Do you realy want to mark task <b>{this.state.currentTask.title}</b> as complete?</p>\r\n          <ButtonContainer type=\"center\">\r\n            <Button type=\"confirm\" title=\"ok\" clickHandler={() => this.changeStatusTask(this.state.currentTask.id, true)}/>\r\n            <Button type=\"decline\" title=\"cancel\" clickHandler={this.resetAction} />\r\n          </ButtonContainer>\r\n        </AuxWrapper>\r\n      )\r\n      break;\r\n\r\n      case 'incomplete':\r\n      modalContent = (\r\n        <AuxWrapper>\r\n          <p>Do you realy want to mark task <b>{this.state.currentTask.title}</b> as not complete?</p>\r\n          <ButtonContainer type=\"center\">\r\n            <Button type=\"confirm\" title=\"ok\" clickHandler={() => this.changeStatusTask(this.state.currentTask.id, false)}/>\r\n            <Button type=\"decline\" title=\"cancel\" clickHandler={this.resetAction} />\r\n          </ButtonContainer>\r\n        </AuxWrapper>\r\n      )\r\n      break;\r\n\r\n      case 'editTask':\r\n      modalContent = (<TaskForm\r\n        submitHandler = {this.editTask}\r\n        cancelHandler={this.resetAction}\r\n        task={this.state.currentTask}\r\n        />)\r\n\r\n      break;\r\n\r\n      case 'newTask':\r\n      modalContent = (\r\n        <TaskForm\r\n          submitHandler = {this.addNewTask}\r\n          cancelHandler={this.resetAction}\r\n          task={this.state.currentTask} />\r\n      )\r\n\r\n      break;\r\n\r\n      default:\r\n       modalContent = '';\r\n    }\r\n\r\n    const header = (\r\n      <div className=\"todo-list-header\">\r\n        <p>You have {incompleteTasks.length} task(s) to do: </p>\r\n        <ButtonContainer>\r\n          <Button type=\"confirm\" title=\"add new task\" clickHandler={() => this.setAction('newTask')}/>\r\n        </ButtonContainer>\r\n      </div>\r\n    )\r\n\r\n    let tasks = [...this.state.tasks];\r\n    tasks = tasks\r\n      .sort((a, b) => a.priority - b.priority)\r\n      .sort((a, b) => a.status - b.status)\r\n      .map((el, i) => {\r\n            return (\r\n              <Task\r\n                setCurrentTask={(task) => this.setCurrentTask(task)}\r\n                key = {i}\r\n                task = {el}\r\n                toggleDescription = {this.toggleDescription}\r\n                setAction = {(type) => this.setAction(type)}\r\n              />\r\n            )\r\n          });\r\n\r\n      const modal = this.state.currentAction !== '' ? (\r\n        <AuxWrapper>\r\n          <Backdrop clickHandler = {this.resetAction} />\r\n          <Modal confirmHandler = {(id) => this.state.modals.handler } >\r\n            {modalContent}\r\n          </Modal>\r\n        </AuxWrapper>\r\n       ) : null;\r\n\r\n      return (\r\n        <AuxWrapper>\r\n          { header }\r\n          { tasks }\r\n          { modal }\r\n        </AuxWrapper>\r\n      )\r\n  }\r\n\r\n}\r\n\r\nexport default Todolist;\r\n","import React , { Component } from 'react';\r\n\r\nimport ButtonContainer from '../../../ui/buttons/ButtonContainer/ButtonContainer';\r\nimport Button from '../../../ui/buttons/Button/Button';\r\n\r\nimport './UserLogin.scss';\r\n\r\nclass UserLogin extends Component {\r\n    constructor(props) {\r\n      super();\r\n      this.state = {\r\n        username : '',\r\n        validationError : false\r\n      }\r\n    }\r\n\r\n    defaultSubmit = (event) => {\r\n      event.preventDefault();\r\n    }\r\n\r\n    changeHandler = (event) => {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    submitHandler = () => {\r\n      const data = this.state.username\r\n\r\n      if (data !== '') {\r\n        this.props.submitHandler(data)\r\n      } else {\r\n        this.setState({\r\n          validationError : true\r\n        })\r\n      }\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div className=\"UserLogin\">\r\n          <h3>Welcome!</h3>\r\n          <p>To start work please enter your name: </p>\r\n          <form onSubmit={this.defaultSubmit} >\r\n            <div className=\"input-block\">\r\n              { this.state.validationError === true ? (\r\n                <div className=\"validation-message\">This field should not be empty</div>\r\n              ) : null }\r\n              <input onChange={this.changeHandler} type=\"text\" name=\"username\" value={this.state.username}/>\r\n            </div>\r\n          </form>\r\n\r\n          <ButtonContainer type=\"center\">\r\n            <Button type=\"confirm\" title=\"Enter\" clickHandler={this.submitHandler}/>\r\n          </ButtonContainer>\r\n\r\n        </div>\r\n      )\r\n    }\r\n\r\n}\r\n\r\nexport default UserLogin;\r\n","import React, {Component} from 'react';\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\n\r\nimport { faSignOutAlt, faTrash, faPen, faCheck, faArrowUp, faChevronDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport './App.scss';\r\nimport './assets/scss/forms.scss';\r\n\r\nimport Header from './layout/Header/Header';\r\nimport Footer from './layout/Footer/Footer';\r\nimport Todolist from './components/Todolist/Todolist';\r\nimport UserLogin from './components/userControls/UserLogin/UserLogin';\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      user : null\r\n    }\r\n\r\n    this.library = library;\r\n  }\r\n\r\n  setUser = (username) => {\r\n    localStorage.setItem('user', username);\r\n  }\r\n\r\n  checkUser = () => {\r\n    const user = localStorage.getItem('user');\r\n    this.setState({\r\n        user : user\r\n    });\r\n  }\r\n\r\n  logout = () => {\r\n    localStorage.clear();\r\n    this.checkUser();\r\n  }\r\n\r\n  userLogin = (username) => {\r\n    this.setUser(username);\r\n    this.checkUser();\r\n  }\r\n\r\n\r\n  render() {\r\n    this.library.add(faSignOutAlt, faTrash, faPen, faCheck, faArrowUp, faChevronDown );\r\n\r\n\r\n    let mainContent = (this.state.user !== null) ? (\r\n      <Todolist />\r\n    ) : (\r\n      <UserLogin submitHandler={this.userLogin} />\r\n    )\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Header\r\n          user={this.state.user}\r\n          logout = {this.logout}\r\n        />\r\n\r\n        <main>\r\n          { mainContent }\r\n        </main>\r\n\r\n        <Footer />\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}